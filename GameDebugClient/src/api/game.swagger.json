{
  "x-generator": "NSwag v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Rest Adventure - Game API",
    "version": "0.0.0-alpha.0.142+7a5a295ecc110a8591e53293ebee75fcd6ffe508"
  },
  "servers": [
    {
      "url": "https://localhost:7056"
    }
  ],
  "paths": {
    "/game/team/characters/{characterGuid}/combats/in-preparation": {
      "get": {
        "tags": [
          "Combats"
        ],
        "summary": "Get combats in preparation",
        "operationId": "Combats_GetCombatsInPreparation",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CombatInPreparation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/combats/in-preparation/{combatGuid}/join/{side}": {
      "post": {
        "tags": [
          "Combats"
        ],
        "summary": "Join combat in preparation",
        "operationId": "Combats_JoinCombatInPreparation",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "combatGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "side",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/CombatSide"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/combats": {
      "get": {
        "tags": [
          "Combats"
        ],
        "summary": "Get combats",
        "operationId": "Combats_GetCombats",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CombatInstance"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/status/ping": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Ping",
        "operationId": "GameApiStatus_Ping",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/content/characters/classes/{characterClassId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get character class",
        "operationId": "GameContent_GetCharacterClass",
        "parameters": [
          {
            "name": "characterClassId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CharacterClass"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/content/items/{itemId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get item",
        "operationId": "GameContent_GetItem",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/content/locations/{locationId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get location",
        "operationId": "GameContent_GetLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/content/jobs/{jobId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get job",
        "operationId": "GameContent_GetJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/content/static-objects/{staticObjectId}": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get static object",
        "operationId": "GameContent_GetHarvestable",
        "parameters": [
          {
            "name": "staticObjectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StaticObject"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/settings": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get game settings",
        "operationId": "Game_GetGameSettings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/state": {
      "get": {
        "tags": [
          "Game"
        ],
        "summary": "Get game state",
        "operationId": "Game_GetGameState",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameState"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/jobs/harvestables": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get harvestables",
        "operationId": "JobsHarvest_GetHarvestables",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HarvestableEntity"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/jobs/harvestables/{entityGuid}/{harvestName}": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Harvest",
        "operationId": "JobsHarvest_Harvest",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "entityGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          },
          {
            "name": "harvestName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get accessible locations",
        "operationId": "Locations_GetAccessibleLocations",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationWithAccess"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/locations/{locationGuid}": {
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Move to location",
        "operationId": "Locations_MoveToLocation",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "locationGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/pve/monsters": {
      "get": {
        "tags": [
          "Pve"
        ],
        "summary": "Get monsters",
        "operationId": "Pve_GetMonsters",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MonsterGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/pve/monsters/{groupId}": {
      "post": {
        "tags": [
          "Pve"
        ],
        "summary": "Attack monsters",
        "operationId": "Pve_AttackMonsters",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters": {
      "post": {
        "tags": [
          "Team"
        ],
        "summary": "Create character",
        "operationId": "TeamCharacters_CreateCharacter",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCharacterRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCharacter"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get character",
        "operationId": "TeamCharacters_GetCharacter",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamCharacter"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Team"
        ],
        "summary": "Delete character",
        "operationId": "TeamCharacters_DeleteCharacter",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team/characters/{characterGuid}/history": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get character history",
        "operationId": "TeamCharacters_SearchCharacterHistory",
        "parameters": [
          {
            "name": "characterGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "The page number\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The page size\n            ",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultOfCharacterHistoryEntry"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    },
    "/game/team": {
      "get": {
        "tags": [
          "Team"
        ],
        "summary": "Get team",
        "operationId": "Team_GetTeam",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "api-key": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CombatInPreparation": {
        "type": "object",
        "description": "Combat instance\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "attackers",
          "defenders"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the combat instance\n            ",
            "format": "guid",
            "minLength": 1
          },
          "attackers": {
            "type": "array",
            "description": "The attackers in the combat instance\n            ",
            "items": {
              "$ref": "#/components/schemas/EntityMinimal"
            }
          },
          "defenders": {
            "type": "array",
            "description": "The defenders in the combat instance\n            ",
            "items": {
              "$ref": "#/components/schemas/EntityMinimal"
            }
          }
        }
      },
      "EntityMinimal": {
        "type": "object",
        "description": "Entity (minimal)\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the entity\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the entity\n            ",
            "minLength": 1
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CombatSide": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Attackers",
          "Defenders"
        ],
        "enum": [
          "attackers",
          "defenders"
        ]
      },
      "CombatInstance": {
        "type": "object",
        "description": "Combat instance\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "attackers",
          "defenders",
          "turn"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the combat instance\n            ",
            "format": "guid",
            "minLength": 1
          },
          "attackers": {
            "type": "array",
            "description": "The attackers in the combat instance\n            ",
            "items": {
              "$ref": "#/components/schemas/EntityInCombat"
            }
          },
          "defenders": {
            "type": "array",
            "description": "The defenders in the combat instance\n            ",
            "items": {
              "$ref": "#/components/schemas/EntityInCombat"
            }
          },
          "turn": {
            "type": "integer",
            "description": "The current turn of the combat instance\n            ",
            "format": "int32"
          }
        }
      },
      "EntityInCombat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityMinimal"
          },
          {
            "type": "object",
            "description": "Entity in combat\n            ",
            "additionalProperties": false,
            "required": [
              "level",
              "combat"
            ],
            "properties": {
              "level": {
                "type": "integer",
                "description": "The level of the character\n            ",
                "format": "int32"
              },
              "combat": {
                "description": "The combat statistics of the character\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EntityCombatStatistics"
                  }
                ]
              }
            }
          }
        ]
      },
      "EntityCombatStatistics": {
        "type": "object",
        "description": "Entity combat statistics\n            ",
        "additionalProperties": false,
        "required": [
          "health",
          "maxHealth",
          "speed",
          "attack"
        ],
        "properties": {
          "health": {
            "type": "integer",
            "description": "The health of the entity\n            ",
            "format": "int32"
          },
          "maxHealth": {
            "type": "integer",
            "description": "The max health of the entity\n            ",
            "format": "int32"
          },
          "speed": {
            "type": "integer",
            "description": "The speed of the entity\n            ",
            "format": "int32"
          },
          "attack": {
            "type": "integer",
            "description": "The attack of the entity\n            ",
            "format": "int32"
          }
        }
      },
      "CharacterClass": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterClassMinimal"
          },
          {
            "type": "object",
            "description": "Character class\n            ",
            "additionalProperties": false,
            "required": [
              "description",
              "levelCaps"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the character class\n            ",
                "minLength": 1
              },
              "levelCaps": {
                "type": "array",
                "description": "The level caps of the character class\n            ",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "CharacterClassMinimal": {
        "type": "object",
        "description": "Character class (minimal)\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the character class\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the character class\n            ",
            "minLength": 1
          }
        }
      },
      "Item": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemMinimal"
          },
          {
            "type": "object",
            "description": "Item\n            ",
            "additionalProperties": false,
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the item\n            ",
                "nullable": true
              }
            }
          }
        ]
      },
      "ItemMinimal": {
        "type": "object",
        "description": "Item (minimal)\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "weight"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the item\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the item\n            ",
            "minLength": 1
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the item\n            ",
            "format": "int32"
          }
        }
      },
      "Location": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LocationMinimal"
          },
          {
            "type": "object",
            "description": "Map location\n            ",
            "additionalProperties": false,
            "required": [
              "discovered",
              "connectedLocations"
            ],
            "properties": {
              "discovered": {
                "type": "boolean",
                "description": "Has this location been discovered by the player.\nIf false, the connected locations will be hidden.\n            "
              },
              "connectedLocations": {
                "type": "array",
                "description": "The locations connected to this one\n            ",
                "items": {
                  "$ref": "#/components/schemas/LocationMinimal"
                }
              }
            }
          }
        ]
      },
      "LocationMinimal": {
        "type": "object",
        "description": "Map location minimal information\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "area",
          "positionX",
          "positionY"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the location\n            ",
            "format": "guid",
            "minLength": 1
          },
          "area": {
            "description": "The area associated with the location\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MapArea"
              }
            ]
          },
          "positionX": {
            "type": "integer",
            "description": "The X coordinate associated with the location\n            ",
            "format": "int32"
          },
          "positionY": {
            "type": "integer",
            "description": "The Y coordinate associated with the location\n            ",
            "format": "int32"
          }
        }
      },
      "MapArea": {
        "type": "object",
        "description": "Map area\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the area\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the area\n            ",
            "minLength": 1
          }
        }
      },
      "Job": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JobMinimal"
          },
          {
            "type": "object",
            "description": "Job\n            ",
            "additionalProperties": false,
            "required": [
              "innate",
              "levelCaps"
            ],
            "properties": {
              "description": {
                "type": "string",
                "description": "The description of the job\n            ",
                "nullable": true
              },
              "innate": {
                "type": "boolean",
                "description": "Is the job innate?\n            "
              },
              "levelCaps": {
                "type": "array",
                "description": "The experience to reach each level of the job.\n            ",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        ]
      },
      "JobMinimal": {
        "type": "object",
        "description": "Job (minimal)\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the job\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the job\n            ",
            "minLength": 1
          }
        }
      },
      "StaticObject": {
        "type": "object",
        "description": "Static object\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the static object\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the static object\n            ",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "The description of the static object\n            ",
            "nullable": true
          }
        }
      },
      "GameSettings": {
        "type": "object",
        "description": "Game settings\n            ",
        "additionalProperties": false,
        "required": [
          "maxTeamSize"
        ],
        "properties": {
          "maxTeamSize": {
            "type": "integer",
            "description": "The max number of characters in a team\n            ",
            "format": "int32"
          }
        }
      },
      "GameState": {
        "type": "object",
        "description": "Game state\n            ",
        "additionalProperties": false,
        "required": [
          "tick",
          "isComputingNextTick",
          "paused"
        ],
        "properties": {
          "tick": {
            "type": "integer",
            "description": "The current game tick\n            ",
            "format": "int64"
          },
          "isComputingNextTick": {
            "type": "boolean",
            "description": "Is the next tick being computed.\nIn that case NextTickDate refers to the old tick's next tick date, which means that it is probably in the past.\n            "
          },
          "paused": {
            "type": "boolean",
            "description": "Is the game paused?\n            "
          },
          "lastTickDate": {
            "type": "string",
            "description": "If the game is started, the date at which last tick has been computed\n            ",
            "format": "date-time",
            "nullable": true
          },
          "nextTickDate": {
            "type": "string",
            "description": "If the game is not paused, the date at which next tick will be computed\n            ",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "HarvestableEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityMinimal"
          },
          {
            "type": "object",
            "description": "Harvestable entity\n            ",
            "additionalProperties": false,
            "required": [
              "harvests"
            ],
            "properties": {
              "harvests": {
                "type": "array",
                "description": "The harvests available on the entity\n            ",
                "items": {
                  "$ref": "#/components/schemas/HarvestableEntityHarvest"
                }
              }
            }
          }
        ]
      },
      "HarvestableEntityHarvest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HarvestableEntityHarvestMinimal"
          },
          {
            "type": "object",
            "description": "Harvestable entity harvest\n            ",
            "additionalProperties": false,
            "required": [
              "canHarvest"
            ],
            "properties": {
              "canHarvest": {
                "type": "boolean",
                "description": "Can the harvest be performed\n            "
              },
              "whyCannotHarvest": {
                "type": "string",
                "description": "Why cannot the harvest be performed\n            ",
                "nullable": true
              }
            }
          }
        ]
      },
      "HarvestableEntityHarvestMinimal": {
        "type": "object",
        "description": "Harvestable entity harvest (minimal\n            ",
        "additionalProperties": false,
        "required": [
          "job",
          "name",
          "expectedHarvest",
          "expectedExperience"
        ],
        "properties": {
          "job": {
            "description": "The job providing the harvest\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/JobMinimal"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the harvest\n            ",
            "minLength": 1
          },
          "expectedHarvest": {
            "type": "array",
            "description": "The expected result of the harvest\n            ",
            "items": {
              "$ref": "#/components/schemas/ItemStack"
            }
          },
          "expectedExperience": {
            "type": "integer",
            "description": "The expected experience gain from the harvest\n            ",
            "format": "int32"
          }
        }
      },
      "ItemStack": {
        "type": "object",
        "description": "Item stack\n            ",
        "additionalProperties": false,
        "required": [
          "item",
          "count"
        ],
        "properties": {
          "item": {
            "description": "The item instance representing this stack\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ItemMinimal"
              }
            ]
          },
          "count": {
            "type": "integer",
            "description": "The number of instances in this stack\n            ",
            "format": "int32"
          }
        }
      },
      "LocationWithAccess": {
        "type": "object",
        "description": "Location with access\n            ",
        "additionalProperties": false,
        "required": [
          "location",
          "isAccessible"
        ],
        "properties": {
          "location": {
            "description": "The location\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocationMinimal"
              }
            ]
          },
          "isAccessible": {
            "type": "boolean",
            "description": "Is the location accessible\n            "
          },
          "whyIsNotAccessible": {
            "type": "string",
            "description": "Why is the location not accessible\n            ",
            "nullable": true
          }
        }
      },
      "MonsterGroup": {
        "type": "object",
        "description": "Monster group\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "monsters",
          "canAttack",
          "expectedExperience"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the group\n            ",
            "format": "guid",
            "minLength": 1
          },
          "monsters": {
            "type": "array",
            "description": "The monsters in the group\n            ",
            "items": {
              "$ref": "#/components/schemas/MonsterInstanceMinimal"
            }
          },
          "canAttack": {
            "type": "boolean",
            "description": "Can the character attack the monsters\n            "
          },
          "whyCannotAttack": {
            "type": "string",
            "description": "Why cannot the character attack the monsters\n            ",
            "nullable": true
          },
          "expectedExperience": {
            "type": "integer",
            "description": "The expected experience gain if the character defeats the monster group\n            ",
            "format": "int32"
          }
        }
      },
      "MonsterInstanceMinimal": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityMinimal"
          },
          {
            "type": "object",
            "description": "Monster minimal\n            ",
            "additionalProperties": false,
            "required": [
              "level"
            ],
            "properties": {
              "level": {
                "type": "integer",
                "description": "The level of the monster\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "TeamCharacter": {
        "type": "object",
        "description": "Character\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "class",
          "progression",
          "location",
          "inventory",
          "jobs",
          "combat"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the character\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the character\n            ",
            "minLength": 1
          },
          "class": {
            "description": "The class of the character\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CharacterClassMinimal"
              }
            ]
          },
          "progression": {
            "description": "The progression of the character\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProgressionBarMinimal"
              }
            ]
          },
          "location": {
            "description": "The current location of the character\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/LocationMinimal"
              }
            ]
          },
          "inventory": {
            "description": "The inventory of the character\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Inventory"
              }
            ]
          },
          "jobs": {
            "type": "array",
            "description": "The jobs of the character\n            ",
            "items": {
              "$ref": "#/components/schemas/JobInstance"
            }
          },
          "combat": {
            "description": "The combat statistics of the entity\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/EntityCombatStatistics"
              }
            ]
          },
          "ongoingAction": {
            "description": "The interaction being performed by the character\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Action"
              }
            ]
          },
          "plannedAction": {
            "description": "The action that the character has planned for the next tick\n            ",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/Action"
              }
            ]
          }
        }
      },
      "ProgressionBarMinimal": {
        "type": "object",
        "description": "Progression bar (minimal)\n            ",
        "additionalProperties": false,
        "required": [
          "level",
          "experience",
          "nextLevelExperience"
        ],
        "properties": {
          "level": {
            "type": "integer",
            "description": "The level of progression\n            ",
            "format": "int32"
          },
          "experience": {
            "type": "integer",
            "description": "The experience acquired\n            ",
            "format": "int32"
          },
          "nextLevelExperience": {
            "type": "integer",
            "description": "The experience required to reach next level. The value is null when Level is the max level.\n            ",
            "format": "int32"
          }
        }
      },
      "Inventory": {
        "type": "object",
        "description": "Inventory\n            ",
        "additionalProperties": false,
        "required": [
          "stacks",
          "weight"
        ],
        "properties": {
          "stacks": {
            "type": "array",
            "description": "The entries of the inventory\n            ",
            "items": {
              "$ref": "#/components/schemas/ItemInstanceStack"
            }
          },
          "weight": {
            "type": "integer",
            "description": "The total weight of the items in the inventory\n            ",
            "format": "int32"
          }
        }
      },
      "ItemInstanceStack": {
        "type": "object",
        "description": "Item stack\n            ",
        "additionalProperties": false,
        "required": [
          "itemInstance",
          "count"
        ],
        "properties": {
          "itemInstance": {
            "description": "The item instance representing this stack\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ItemInstance"
              }
            ]
          },
          "count": {
            "type": "integer",
            "description": "The number of instances in this stack\n            ",
            "format": "int32"
          }
        }
      },
      "ItemInstance": {
        "type": "object",
        "description": "Item instance\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "item"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of this instance\n            ",
            "format": "guid",
            "minLength": 1
          },
          "item": {
            "description": "The unique ID of the item corresponding to this instance\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ItemMinimal"
              }
            ]
          }
        }
      },
      "JobInstance": {
        "type": "object",
        "description": "Job instance\n            ",
        "additionalProperties": false,
        "required": [
          "job",
          "progression"
        ],
        "properties": {
          "job": {
            "description": "The job that is instantiated\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/JobMinimal"
              }
            ]
          },
          "progression": {
            "description": "The progression of the job\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProgressionBarMinimal"
              }
            ]
          }
        }
      },
      "Action": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "move": "#/components/schemas/MoveAction",
            "harvest": "#/components/schemas/HarvestAction",
            "combat-pve": "#/components/schemas/PveCombatAction"
          }
        },
        "description": "An action performed by a character\n            ",
        "additionalProperties": false,
        "required": [
          "name",
          "$type"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the action\n            ",
            "minLength": 1
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "MoveAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "type": "object",
            "description": "Move action\n            ",
            "additionalProperties": false,
            "required": [
              "location"
            ],
            "properties": {
              "location": {
                "description": "The location to which the character is moving\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LocationMinimal"
                  }
                ]
              }
            }
          }
        ]
      },
      "HarvestAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "type": "object",
            "description": "Harvest action\n            ",
            "additionalProperties": false,
            "required": [
              "harvest",
              "target"
            ],
            "properties": {
              "harvest": {
                "description": "The harvest\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/HarvestableEntityHarvestMinimal"
                  }
                ]
              },
              "target": {
                "description": "The target of the harvest\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/StaticObjectInstance"
                  }
                ]
              }
            }
          }
        ]
      },
      "StaticObjectInstance": {
        "type": "object",
        "description": "Static object instance\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "staticObject"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the entity\n            ",
            "format": "guid",
            "minLength": 1
          },
          "staticObject": {
            "description": "The name of the entity\n            ",
            "oneOf": [
              {
                "$ref": "#/components/schemas/StaticObject"
              }
            ]
          }
        }
      },
      "PveCombatAction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Action"
          },
          {
            "type": "object",
            "description": "PVE combat action\n            ",
            "additionalProperties": false,
            "required": [
              "combatId",
              "attackers",
              "defenders"
            ],
            "properties": {
              "combatId": {
                "type": "string",
                "description": "The unique ID of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "attackers": {
                "type": "array",
                "description": "The attackers in the combat instance\n            ",
                "items": {
                  "$ref": "#/components/schemas/EntityMinimal"
                }
              },
              "defenders": {
                "type": "array",
                "description": "The defenders in the combat instance\n            ",
                "items": {
                  "$ref": "#/components/schemas/EntityMinimal"
                }
              }
            }
          }
        ]
      },
      "CreateCharacterRequest": {
        "type": "object",
        "description": "Character creation options\n            ",
        "additionalProperties": false,
        "required": [
          "name",
          "classId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the character\n            ",
            "minLength": 1
          },
          "classId": {
            "type": "string",
            "description": "The class of the character\n            ",
            "format": "guid",
            "minLength": 1
          }
        }
      },
      "SearchResultOfCharacterHistoryEntry": {
        "type": "object",
        "description": "Search result\n            ",
        "additionalProperties": false,
        "required": [
          "items",
          "pageNumber",
          "pageSize",
          "totalItemsCount",
          "totalPagesCount"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items found by the query\n            ",
            "items": {
              "$ref": "#/components/schemas/CharacterHistoryEntry"
            }
          },
          "pageNumber": {
            "type": "integer",
            "description": "The page number corresponding to the results that have been selected\n            ",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "The page size used by the search\n            ",
            "format": "int32"
          },
          "totalItemsCount": {
            "type": "integer",
            "description": "The total number of items matching the query\n            ",
            "format": "int32"
          },
          "totalPagesCount": {
            "type": "integer",
            "description": "The total number of pages\n            ",
            "format": "int32"
          }
        }
      },
      "CharacterHistoryEntry": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "created": "#/components/schemas/CharacterCreatedHistoryEntry",
            "deleted": "#/components/schemas/CharacterDeletedHistoryEntry",
            "moved": "#/components/schemas/CharacterMoveLocationHistoryEntry",
            "inventory-changed": "#/components/schemas/CharacterInventoryChangedHistoryEntry",
            "interaction-started": "#/components/schemas/ActionStartedHistoryEntry",
            "interaction-ended": "#/components/schemas/ActionEndedHistoryEntry",
            "job-learned": "#/components/schemas/CharacterLearnedJobHistoryEntry",
            "job-gained-experience": "#/components/schemas/CharacterJobGainedExperienceHistoryEntry",
            "job-leveled-up": "#/components/schemas/CharacterJobLeveledUpHistoryEntry",
            "combat-preparation-started": "#/components/schemas/CharacterStartedCombatPreparationHistoryEntry",
            "combat-preparation-canceled": "#/components/schemas/CharacterCombatInPreparationCanceledHistoryEntry",
            "combat-started": "#/components/schemas/CharacterCombatStartedHistoryEntry",
            "attacked": "#/components/schemas/CharacterAttackedHistoryEntry",
            "received-attack": "#/components/schemas/CharacterReceivedAttackHistoryEntry",
            "combat-ended": "#/components/schemas/CharacterCombatEndedHistoryEntry"
          }
        },
        "description": "Character history entry\n            ",
        "additionalProperties": false,
        "required": [
          "tick",
          "$type"
        ],
        "properties": {
          "tick": {
            "type": "integer",
            "description": "The tick at which the event happened\n            ",
            "format": "int64"
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "CharacterCreatedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character created history entry\n            ",
            "additionalProperties": false
          }
        ]
      },
      "CharacterDeletedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character deleted history entry\n            ",
            "additionalProperties": false
          }
        ]
      },
      "CharacterMoveLocationHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character moved to location history entry\n            ",
            "additionalProperties": false,
            "required": [
              "oldLocationId",
              "oldLocationPositionX",
              "oldLocationPositionY",
              "oldLocationAreaId",
              "oldLocationAreaName",
              "newLocationId",
              "newLocationPositionX",
              "newLocationPositionY",
              "newLocationAreaId",
              "newLocationAreaName"
            ],
            "properties": {
              "oldLocationId": {
                "type": "string",
                "description": "The unique ID of the old location\n            ",
                "format": "guid",
                "minLength": 1
              },
              "oldLocationPositionX": {
                "type": "integer",
                "description": "The X position of the old location\n            ",
                "format": "int32"
              },
              "oldLocationPositionY": {
                "type": "integer",
                "description": "The Y position of the old location\n            ",
                "format": "int32"
              },
              "oldLocationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the old location\n            ",
                "format": "guid",
                "minLength": 1
              },
              "oldLocationAreaName": {
                "type": "string",
                "description": "The name of the area of the old location\n            ",
                "minLength": 1
              },
              "newLocationId": {
                "type": "string",
                "description": "The unique ID of the new location\n            ",
                "format": "guid",
                "minLength": 1
              },
              "newLocationPositionX": {
                "type": "integer",
                "description": "The X position of the new location\n            ",
                "format": "int32"
              },
              "newLocationPositionY": {
                "type": "integer",
                "description": "The Y position of the new location\n            ",
                "format": "int32"
              },
              "newLocationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the new location\n            ",
                "format": "guid",
                "minLength": 1
              },
              "newLocationAreaName": {
                "type": "string",
                "description": "The name of the area of the new location\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "CharacterInventoryChangedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character inventory changed history entry\n            ",
            "additionalProperties": false,
            "required": [
              "itemInstanceId",
              "itemId",
              "itemName",
              "oldCount",
              "newCount"
            ],
            "properties": {
              "itemInstanceId": {
                "type": "string",
                "description": "The\n            ",
                "format": "guid",
                "minLength": 1
              },
              "itemId": {
                "type": "string",
                "description": "The\n            ",
                "format": "guid",
                "minLength": 1
              },
              "itemName": {
                "type": "string",
                "description": "The\n            ",
                "minLength": 1
              },
              "oldCount": {
                "type": "integer",
                "description": "The\n            ",
                "format": "int32"
              },
              "newCount": {
                "type": "integer",
                "description": "The\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "ActionStartedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Action started history entry\n            ",
            "additionalProperties": false,
            "required": [
              "actionName"
            ],
            "properties": {
              "actionName": {
                "type": "string",
                "description": "The name of the action that has started\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "ActionEndedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Action ended history entry\n            ",
            "additionalProperties": false,
            "required": [
              "actionName"
            ],
            "properties": {
              "actionName": {
                "type": "string",
                "description": "The name of the action that has ended\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "CharacterLearnedJobHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character learned job history entry\n            ",
            "additionalProperties": false,
            "required": [
              "jobId",
              "jobName"
            ],
            "properties": {
              "jobId": {
                "type": "string",
                "description": "The unique ID of the job\n            ",
                "format": "guid",
                "minLength": 1
              },
              "jobName": {
                "type": "string",
                "description": "The name of the job\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "CharacterJobGainedExperienceHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character learned job history entry\n            ",
            "additionalProperties": false,
            "required": [
              "jobId",
              "jobName",
              "oldExperience",
              "newExperience"
            ],
            "properties": {
              "jobId": {
                "type": "string",
                "description": "The unique ID of the job\n            ",
                "format": "guid",
                "minLength": 1
              },
              "jobName": {
                "type": "string",
                "description": "The name of the job\n            ",
                "minLength": 1
              },
              "oldExperience": {
                "type": "integer",
                "description": "The old level of the job\n            ",
                "format": "int32"
              },
              "newExperience": {
                "type": "integer",
                "description": "The new level of the job\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CharacterJobLeveledUpHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character learned job history entry\n            ",
            "additionalProperties": false,
            "required": [
              "jobId",
              "jobName",
              "oldLevel",
              "newLevel"
            ],
            "properties": {
              "jobId": {
                "type": "string",
                "description": "The unique ID of the job\n            ",
                "format": "guid",
                "minLength": 1
              },
              "jobName": {
                "type": "string",
                "description": "The name of the job\n            ",
                "minLength": 1
              },
              "oldLevel": {
                "type": "integer",
                "description": "The old level of the job\n            ",
                "format": "int32"
              },
              "newLevel": {
                "type": "integer",
                "description": "The new level of the job\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "CharacterStartedCombatPreparationHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character started combat in preparation\n            ",
            "additionalProperties": false,
            "required": [
              "combatInstanceId",
              "locationId",
              "locationAreaId",
              "locationAreaName",
              "locationPositionX",
              "locationPositionY",
              "attackers",
              "defenders"
            ],
            "properties": {
              "combatInstanceId": {
                "type": "string",
                "description": "The unique ID of the combat instance\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationId": {
                "type": "string",
                "description": "The unique ID of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaName": {
                "type": "string",
                "description": "The name of the area of the location of the combat\n            ",
                "minLength": 1
              },
              "locationPositionX": {
                "type": "integer",
                "description": "The X position of the location of the combat\n            ",
                "format": "int32"
              },
              "locationPositionY": {
                "type": "integer",
                "description": "The Y position of the location of the combat\n            ",
                "format": "int32"
              },
              "attackers": {
                "type": "array",
                "description": "The attackers of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              },
              "defenders": {
                "type": "array",
                "description": "The defenders of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              }
            }
          }
        ]
      },
      "CombatEntityInHistoryEntry": {
        "type": "object",
        "description": "Combat entity in history entry\n            ",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the entity\n            ",
            "format": "guid",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the entity\n            ",
            "minLength": 1
          }
        }
      },
      "CharacterCombatInPreparationCanceledHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character combat in preparation canceled\n            ",
            "additionalProperties": false,
            "required": [
              "combatInstanceId",
              "locationId",
              "locationAreaId",
              "locationAreaName",
              "locationPositionX",
              "locationPositionY",
              "attackers",
              "defenders"
            ],
            "properties": {
              "combatInstanceId": {
                "type": "string",
                "description": "The unique ID of the combat instance\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationId": {
                "type": "string",
                "description": "The unique ID of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaName": {
                "type": "string",
                "description": "The name of the area of the location of the combat\n            ",
                "minLength": 1
              },
              "locationPositionX": {
                "type": "integer",
                "description": "The X position of the location of the combat\n            ",
                "format": "int32"
              },
              "locationPositionY": {
                "type": "integer",
                "description": "The Y position of the location of the combat\n            ",
                "format": "int32"
              },
              "attackers": {
                "type": "array",
                "description": "The attackers of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              },
              "defenders": {
                "type": "array",
                "description": "The defenders of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              }
            }
          }
        ]
      },
      "CharacterCombatStartedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character combat in preparation canceled\n            ",
            "additionalProperties": false,
            "required": [
              "combatInstanceId",
              "locationId",
              "locationAreaId",
              "locationAreaName",
              "locationPositionX",
              "locationPositionY",
              "attackers",
              "defenders"
            ],
            "properties": {
              "combatInstanceId": {
                "type": "string",
                "description": "The unique ID of the combat instance\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationId": {
                "type": "string",
                "description": "The unique ID of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaName": {
                "type": "string",
                "description": "The name of the area of the location of the combat\n            ",
                "minLength": 1
              },
              "locationPositionX": {
                "type": "integer",
                "description": "The X position of the location of the combat\n            ",
                "format": "int32"
              },
              "locationPositionY": {
                "type": "integer",
                "description": "The Y position of the location of the combat\n            ",
                "format": "int32"
              },
              "attackers": {
                "type": "array",
                "description": "The attackers of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              },
              "defenders": {
                "type": "array",
                "description": "The defenders of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              }
            }
          }
        ]
      },
      "CharacterAttackedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character attacked history entry\n            ",
            "additionalProperties": false,
            "required": [
              "attackDealt",
              "attackReceived",
              "targetId",
              "targetName"
            ],
            "properties": {
              "attackDealt": {
                "description": "The attack dealt by the character\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EntityAttack"
                  }
                ]
              },
              "attackReceived": {
                "description": "The attack received by the target\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EntityAttack"
                  }
                ]
              },
              "targetId": {
                "type": "string",
                "description": "The unique ID of the target receiving the attack\n            ",
                "format": "guid",
                "minLength": 1
              },
              "targetName": {
                "type": "string",
                "description": "The name of the target receiving the attack\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "EntityAttack": {
        "type": "object",
        "description": "Entity attack\n            ",
        "additionalProperties": false,
        "required": [
          "damage"
        ],
        "properties": {
          "damage": {
            "type": "integer",
            "description": "The damage of the attack\n            ",
            "format": "int32"
          }
        }
      },
      "CharacterReceivedAttackHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character attacked history entry\n            ",
            "additionalProperties": false,
            "required": [
              "attackDealt",
              "attackReceived",
              "attackerId",
              "attackerName"
            ],
            "properties": {
              "attackDealt": {
                "description": "The attack dealt by the character\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EntityAttack"
                  }
                ]
              },
              "attackReceived": {
                "description": "The attack received by the target\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EntityAttack"
                  }
                ]
              },
              "attackerId": {
                "type": "string",
                "description": "The unique ID of the target receiving the attack\n            ",
                "format": "guid",
                "minLength": 1
              },
              "attackerName": {
                "type": "string",
                "description": "The name of the target receiving the attack\n            ",
                "minLength": 1
              }
            }
          }
        ]
      },
      "CharacterCombatEndedHistoryEntry": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CharacterHistoryEntry"
          },
          {
            "type": "object",
            "description": "Character combat in preparation canceled\n            ",
            "additionalProperties": false,
            "required": [
              "combatInstanceId",
              "locationId",
              "locationAreaId",
              "locationAreaName",
              "locationPositionX",
              "locationPositionY",
              "attackers",
              "defenders",
              "winner",
              "duration"
            ],
            "properties": {
              "combatInstanceId": {
                "type": "string",
                "description": "The unique ID of the combat instance\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationId": {
                "type": "string",
                "description": "The unique ID of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaId": {
                "type": "string",
                "description": "The unique ID of the area of the location of the combat\n            ",
                "format": "guid",
                "minLength": 1
              },
              "locationAreaName": {
                "type": "string",
                "description": "The name of the area of the location of the combat\n            ",
                "minLength": 1
              },
              "locationPositionX": {
                "type": "integer",
                "description": "The X position of the location of the combat\n            ",
                "format": "int32"
              },
              "locationPositionY": {
                "type": "integer",
                "description": "The Y position of the location of the combat\n            ",
                "format": "int32"
              },
              "attackers": {
                "type": "array",
                "description": "The attackers of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              },
              "defenders": {
                "type": "array",
                "description": "The defenders of the combat\n            ",
                "items": {
                  "$ref": "#/components/schemas/CombatEntityInHistoryEntry"
                }
              },
              "winner": {
                "description": "The winner of the combat\n            ",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CombatSide"
                  }
                ]
              },
              "duration": {
                "type": "integer",
                "description": "The number of ticks during which the combat was being played\n            ",
                "format": "int32"
              }
            }
          }
        ]
      },
      "Team": {
        "type": "object",
        "description": "Team of characters\n            ",
        "additionalProperties": false,
        "required": [
          "characters"
        ],
        "properties": {
          "characters": {
            "type": "array",
            "description": "The characters in the team\n            ",
            "items": {
              "$ref": "#/components/schemas/TeamCharacter"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api-key": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "tags": [
    {
      "name": "Combats"
    },
    {
      "name": "Status"
    },
    {
      "name": "Game"
    },
    {
      "name": "Jobs"
    },
    {
      "name": "Locations"
    },
    {
      "name": "Pve"
    },
    {
      "name": "Team"
    }
  ]
}