//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AdminApiStatusApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7056";
    }

    /**
     * Ping
     */
    ping(): Observable<void> {
        let url_ = this.baseUrl + "/admin/status/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPing(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPing(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPing(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AdminGameContentApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7056";
    }

    /**
     * Search items
     * @param pageNumber (optional) The page number
     * @param pageSize (optional) The page size
     */
    searchItems(pageNumber?: number | undefined, pageSize?: number | undefined): Observable<SearchResultOfItem> {
        let url_ = this.baseUrl + "/admin/game/content/items?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchItems(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchItems(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchResultOfItem>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchResultOfItem>;
        }));
    }

    protected processSearchItems(response: HttpResponseBase): Observable<SearchResultOfItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchResultOfItem.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Search locations
     * @param pageNumber (optional) The page number
     * @param pageSize (optional) The page size
     */
    searchLocations(pageNumber?: number | undefined, pageSize?: number | undefined): Observable<SearchResultOfLocation> {
        let url_ = this.baseUrl + "/admin/game/content/locations?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchLocations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchLocations(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchResultOfLocation>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchResultOfLocation>;
        }));
    }

    protected processSearchLocations(response: HttpResponseBase): Observable<SearchResultOfLocation> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchResultOfLocation.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Search jobs
     * @param pageNumber (optional) The page number
     * @param pageSize (optional) The page size
     */
    searchJobs(pageNumber?: number | undefined, pageSize?: number | undefined): Observable<SearchResultOfJob> {
        let url_ = this.baseUrl + "/admin/game/content/jobs?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchJobs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchJobs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchResultOfJob>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchResultOfJob>;
        }));
    }

    protected processSearchJobs(response: HttpResponseBase): Observable<SearchResultOfJob> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchResultOfJob.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Search harvestables
     * @param pageNumber (optional) The page number
     * @param pageSize (optional) The page size
     */
    searchHarvestables(pageNumber?: number | undefined, pageSize?: number | undefined): Observable<SearchResultOfHarvestable> {
        let url_ = this.baseUrl + "/admin/game/content/harvestables?";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchHarvestables(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchHarvestables(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchResultOfHarvestable>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchResultOfHarvestable>;
        }));
    }

    protected processSearchHarvestables(response: HttpResponseBase): Observable<SearchResultOfHarvestable> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchResultOfHarvestable.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AdminGameApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7056";
    }

    /**
     * Get game settings
     */
    getGameSettings(): Observable<GameSettings> {
        let url_ = this.baseUrl + "/admin/game/settings";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGameSettings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGameSettings(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameSettings>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameSettings>;
        }));
    }

    protected processGetGameSettings(response: HttpResponseBase): Observable<GameSettings> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameSettings.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get game state
     */
    getGameState(): Observable<GameState> {
        let url_ = this.baseUrl + "/admin/game/state";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetGameState(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetGameState(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GameState>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GameState>;
        }));
    }

    protected processGetGameState(response: HttpResponseBase): Observable<GameState> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GameState.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Start simulation
     */
    startSimulation(): Observable<void> {
        let url_ = this.baseUrl + "/admin/game/start";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStartSimulation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStartSimulation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStartSimulation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Tick now
     */
    tickNow(): Observable<void> {
        let url_ = this.baseUrl + "/admin/game/tick";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTickNow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTickNow(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processTickNow(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Stop simulation
     */
    stopSimulation(): Observable<void> {
        let url_ = this.baseUrl + "/admin/game/stop";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStopSimulation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStopSimulation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processStopSimulation(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class AdminPlayersApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7056";
    }

    /**
     * Get players
     */
    getPlayers(): Observable<Player[]> {
        let url_ = this.baseUrl + "/admin/players";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPlayers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPlayers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Player[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Player[]>;
        }));
    }

    protected processGetPlayers(response: HttpResponseBase): Observable<Player[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Player.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Register player
     * @param playerName (optional) 
     */
    registerPlayer(userGuid: string, playerName?: string | undefined): Observable<Player> {
        let url_ = this.baseUrl + "/admin/players/{userGuid}?";
        if (userGuid === undefined || userGuid === null)
            throw new Error("The parameter 'userGuid' must be defined.");
        url_ = url_.replace("{userGuid}", encodeURIComponent("" + userGuid));
        if (playerName === null)
            throw new Error("The parameter 'playerName' cannot be null.");
        else if (playerName !== undefined)
            url_ += "playerName=" + encodeURIComponent("" + playerName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterPlayer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterPlayer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Player>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Player>;
        }));
    }

    protected processRegisterPlayer(response: HttpResponseBase): Observable<Player> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Player.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Get player
     */
    getPlayer(userGuid: string): Observable<Player> {
        let url_ = this.baseUrl + "/admin/players/{userGuid}";
        if (userGuid === undefined || userGuid === null)
            throw new Error("The parameter 'userGuid' must be defined.");
        url_ = url_.replace("{userGuid}", encodeURIComponent("" + userGuid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPlayer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPlayer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Player>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Player>;
        }));
    }

    protected processGetPlayer(response: HttpResponseBase): Observable<Player> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Player.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Refresh player key
     */
    refreshPlayerKey(userGuid: string): Observable<Player> {
        let url_ = this.baseUrl + "/admin/players/{userGuid}/refresh";
        if (userGuid === undefined || userGuid === null)
            throw new Error("The parameter 'userGuid' must be defined.");
        url_ = url_.replace("{userGuid}", encodeURIComponent("" + userGuid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshPlayerKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshPlayerKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<Player>;
                }
            } else
                return _observableThrow(response_) as any as Observable<Player>;
        }));
    }

    protected processRefreshPlayerKey(response: HttpResponseBase): Observable<Player> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Player.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class SearchResultOfItem implements ISearchResultOfItem {
    items?: Item[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;

    constructor(data?: ISearchResultOfItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Item.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalItemsCount = _data["totalItemsCount"];
            this.totalPagesCount = _data["totalPagesCount"];
        }
    }

    static fromJS(data: any): SearchResultOfItem {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultOfItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalItemsCount"] = this.totalItemsCount;
        data["totalPagesCount"] = this.totalPagesCount;
        return data;
    }
}

export interface ISearchResultOfItem {
    items?: Item[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;
}

/** Item (minimal) */
export class ItemMinimal implements IItemMinimal {
    /** The unique ID of the item
             */
    id!: string;
    /** The name of the item
             */
    name!: string;

    constructor(data?: IItemMinimal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ItemMinimal {
        data = typeof data === 'object' ? data : {};
        let result = new ItemMinimal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

/** Item (minimal) */
export interface IItemMinimal {
    /** The unique ID of the item
             */
    id: string;
    /** The name of the item
             */
    name: string;
}

/** Item */
export class Item extends ItemMinimal implements IItem {
    /** The description of the item
             */
    description?: string | undefined;
    /** The weight of the item
             */
    weight!: number;

    constructor(data?: IItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"];
            this.weight = _data["weight"];
        }
    }

    static override fromJS(data: any): Item {
        data = typeof data === 'object' ? data : {};
        let result = new Item();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["weight"] = this.weight;
        super.toJSON(data);
        return data;
    }
}

/** Item */
export interface IItem extends IItemMinimal {
    /** The description of the item
             */
    description?: string | undefined;
    /** The weight of the item
             */
    weight: number;
}

export class SearchResultOfLocation implements ISearchResultOfLocation {
    items?: Location[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;

    constructor(data?: ISearchResultOfLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Location.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalItemsCount = _data["totalItemsCount"];
            this.totalPagesCount = _data["totalPagesCount"];
        }
    }

    static fromJS(data: any): SearchResultOfLocation {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultOfLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalItemsCount"] = this.totalItemsCount;
        data["totalPagesCount"] = this.totalPagesCount;
        return data;
    }
}

export interface ISearchResultOfLocation {
    items?: Location[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;
}

/** Map location minimal information */
export class LocationMinimal implements ILocationMinimal {
    /** The unique ID of the location
             */
    id!: string;
    /** The area associated with the location
             */
    area!: MapArea;
    /** The X coordinate associated with the location
             */
    positionX!: number;
    /** The Y coordinate associated with the location
             */
    positionY!: number;

    constructor(data?: ILocationMinimal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.area = new MapArea();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.area = _data["area"] ? MapArea.fromJS(_data["area"]) : new MapArea();
            this.positionX = _data["positionX"];
            this.positionY = _data["positionY"];
        }
    }

    static fromJS(data: any): LocationMinimal {
        data = typeof data === 'object' ? data : {};
        let result = new LocationMinimal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["area"] = this.area ? this.area.toJSON() : <any>undefined;
        data["positionX"] = this.positionX;
        data["positionY"] = this.positionY;
        return data;
    }
}

/** Map location minimal information */
export interface ILocationMinimal {
    /** The unique ID of the location
             */
    id: string;
    /** The area associated with the location
             */
    area: MapArea;
    /** The X coordinate associated with the location
             */
    positionX: number;
    /** The Y coordinate associated with the location
             */
    positionY: number;
}

/** Map location */
export class Location extends LocationMinimal implements ILocation {
    /** Has this location been discovered by the player.
If false, the connected locations will be hidden.
             */
    discovered!: boolean;
    /** The locations connected to this one
             */
    connectedLocations!: LocationMinimal[];

    constructor(data?: ILocation) {
        super(data);
        if (!data) {
            this.connectedLocations = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.discovered = _data["discovered"];
            if (Array.isArray(_data["connectedLocations"])) {
                this.connectedLocations = [] as any;
                for (let item of _data["connectedLocations"])
                    this.connectedLocations!.push(LocationMinimal.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discovered"] = this.discovered;
        if (Array.isArray(this.connectedLocations)) {
            data["connectedLocations"] = [];
            for (let item of this.connectedLocations)
                data["connectedLocations"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

/** Map location */
export interface ILocation extends ILocationMinimal {
    /** Has this location been discovered by the player.
If false, the connected locations will be hidden.
             */
    discovered: boolean;
    /** The locations connected to this one
             */
    connectedLocations: LocationMinimal[];
}

/** Map area */
export class MapArea implements IMapArea {
    /** The unique ID of the area
             */
    id!: string;
    /** The name of the area
             */
    name!: string;

    constructor(data?: IMapArea) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): MapArea {
        data = typeof data === 'object' ? data : {};
        let result = new MapArea();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

/** Map area */
export interface IMapArea {
    /** The unique ID of the area
             */
    id: string;
    /** The name of the area
             */
    name: string;
}

export class SearchResultOfJob implements ISearchResultOfJob {
    items?: Job[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;

    constructor(data?: ISearchResultOfJob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Job.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalItemsCount = _data["totalItemsCount"];
            this.totalPagesCount = _data["totalPagesCount"];
        }
    }

    static fromJS(data: any): SearchResultOfJob {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultOfJob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalItemsCount"] = this.totalItemsCount;
        data["totalPagesCount"] = this.totalPagesCount;
        return data;
    }
}

export interface ISearchResultOfJob {
    items?: Job[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;
}

/** Job (minimal) */
export class JobMinimal implements IJobMinimal {
    /** The unique ID of the job
             */
    id!: string;
    /** The name of the job
             */
    name!: string;

    constructor(data?: IJobMinimal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): JobMinimal {
        data = typeof data === 'object' ? data : {};
        let result = new JobMinimal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

/** Job (minimal) */
export interface IJobMinimal {
    /** The unique ID of the job
             */
    id: string;
    /** The name of the job
             */
    name: string;
}

/** Job */
export class Job extends JobMinimal implements IJob {
    /** The description of the job
             */
    description?: string | undefined;
    /** Is the job innate?
             */
    innate!: boolean;
    /** The experience to reach each level of the job.
             */
    levelsExperience!: number[];

    constructor(data?: IJob) {
        super(data);
        if (!data) {
            this.levelsExperience = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"];
            this.innate = _data["innate"];
            if (Array.isArray(_data["levelsExperience"])) {
                this.levelsExperience = [] as any;
                for (let item of _data["levelsExperience"])
                    this.levelsExperience!.push(item);
            }
        }
    }

    static override fromJS(data: any): Job {
        data = typeof data === 'object' ? data : {};
        let result = new Job();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["innate"] = this.innate;
        if (Array.isArray(this.levelsExperience)) {
            data["levelsExperience"] = [];
            for (let item of this.levelsExperience)
                data["levelsExperience"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

/** Job */
export interface IJob extends IJobMinimal {
    /** The description of the job
             */
    description?: string | undefined;
    /** Is the job innate?
             */
    innate: boolean;
    /** The experience to reach each level of the job.
             */
    levelsExperience: number[];
}

export class SearchResultOfHarvestable implements ISearchResultOfHarvestable {
    items?: Harvestable[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;

    constructor(data?: ISearchResultOfHarvestable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(Harvestable.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.totalItemsCount = _data["totalItemsCount"];
            this.totalPagesCount = _data["totalPagesCount"];
        }
    }

    static fromJS(data: any): SearchResultOfHarvestable {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResultOfHarvestable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["totalItemsCount"] = this.totalItemsCount;
        data["totalPagesCount"] = this.totalPagesCount;
        return data;
    }
}

export interface ISearchResultOfHarvestable {
    items?: Harvestable[];
    pageNumber?: number;
    pageSize?: number;
    totalItemsCount?: number;
    totalPagesCount?: number;
}

/** Harvestable */
export class Harvestable implements IHarvestable {
    /** The unique ID of the harvestable
             */
    id!: string;
    /** The name of the harvestable
             */
    name!: string;
    /** The description of the harvestable
             */
    description?: string | undefined;

    constructor(data?: IHarvestable) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): Harvestable {
        data = typeof data === 'object' ? data : {};
        let result = new Harvestable();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

/** Harvestable */
export interface IHarvestable {
    /** The unique ID of the harvestable
             */
    id: string;
    /** The name of the harvestable
             */
    name: string;
    /** The description of the harvestable
             */
    description?: string | undefined;
}

/** Game settings */
export class GameSettings implements IGameSettings {
    /** The max number of characters in a team
             */
    maxTeamSize!: number;

    constructor(data?: IGameSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.maxTeamSize = _data["maxTeamSize"];
        }
    }

    static fromJS(data: any): GameSettings {
        data = typeof data === 'object' ? data : {};
        let result = new GameSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxTeamSize"] = this.maxTeamSize;
        return data;
    }
}

/** Game settings */
export interface IGameSettings {
    /** The max number of characters in a team
             */
    maxTeamSize: number;
}

/** Game state */
export class GameState implements IGameState {
    /** The current game tick
             */
    tick!: number;
    /** Is the game paused?
             */
    paused!: boolean;
    /** If the game is started, the date at which last tick has been computed
             */
    lastTickDate?: Date | undefined;
    /** If the game is not paused, the date at which next tick will be computed
             */
    nextTickDate?: Date | undefined;

    constructor(data?: IGameState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tick = _data["tick"];
            this.paused = _data["paused"];
            this.lastTickDate = _data["lastTickDate"] ? new Date(_data["lastTickDate"].toString()) : <any>undefined;
            this.nextTickDate = _data["nextTickDate"] ? new Date(_data["nextTickDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GameState {
        data = typeof data === 'object' ? data : {};
        let result = new GameState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tick"] = this.tick;
        data["paused"] = this.paused;
        data["lastTickDate"] = this.lastTickDate ? this.lastTickDate.toISOString() : <any>undefined;
        data["nextTickDate"] = this.nextTickDate ? this.nextTickDate.toISOString() : <any>undefined;
        return data;
    }
}

/** Game state */
export interface IGameState {
    /** The current game tick
             */
    tick: number;
    /** Is the game paused?
             */
    paused: boolean;
    /** If the game is started, the date at which last tick has been computed
             */
    lastTickDate?: Date | undefined;
    /** If the game is not paused, the date at which next tick will be computed
             */
    nextTickDate?: Date | undefined;
}

/** A player */
export class Player implements IPlayer {
    /** The unique ID of the player
             */
    id!: string;
    /** The name of the player
             */
    name!: string;
    /** The API key that grants access to the Game API
             */
    apiKey!: string;

    constructor(data?: IPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.apiKey = _data["apiKey"];
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["apiKey"] = this.apiKey;
        return data;
    }
}

/** A player */
export interface IPlayer {
    /** The unique ID of the player
             */
    id: string;
    /** The name of the player
             */
    name: string;
    /** The API key that grants access to the Game API
             */
    apiKey: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}